plugins {
	id 'org.springframework.boot' version '2.7.1'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id 'eclipse'
	id 'groovy'
	id 'jacoco'
	id "org.sonarqube" version "2.7"
}

ext {
	securityVersion = "0.0.1-SNAPSHOT"
	frameworkVersion = "0.0.1-SNAPSHOT"
	domainVersion = "0.0.1-SNAPSHOT"
	
	springCloudVersion = "2021.0.3"
	springCloudConnectorServiceVersion = "2.0.4.RELEASE"
	cloudFoundryConnectorVersion = "2.0.4.RELEASE"
	gcpStorageVersion = "1.2.8.RELEASE"
	jjwtVersion = "0.9.1"
	jasyptVersion = "3.0.4"
	groovyVersion = "2.1-M2-groovy-3.0"
	groovyJsonVersion = "3.0.9"
	cglibVersion = "3.2.2"
	springSecurityTestVersion = "5.7.2"
	commonsBeanutilsVersion = "1.9.4"
	dom4jVersion = "2.1.3"
	commonsCompressVersion = "1.20"
	hibernateValidatorVersion = "6.2.3.Final"
	snakeyamlVersion = "1.30"
	springSecurityWebVersion = "5.7.2"
	meanbeanVersion = "2.0.3"
	db2Version = "11.5.5.0"
	ext['log4j2.version'] = '2.17.1'
	
}

group = 'com.cardinalhealth.ids.boss2'
archivesBaseName = 'boss-deidentify-utility'

sourceCompatibility = '11'
targetCompatibility = '11'

def nexus_url = project.hasProperty('url') ? project.property('url') : 'https://nexus.cardinalhealth.net/repository/ids-maven-snapshot/'
def env = project.hasProperty('env') ? project.property('env') : 'local'
def ignoretestfaliure=  project.hasProperty('ignoretestfaliure') ? project.property('ignoretestfaliure') : 'false'

repositories {
	if (env == 'local') {
		mavenLocal()
	} else {
		maven {url nexus_url}
	}
	maven {url "https://nexus.cardinalhealth.net/repository/maven/"}
}

configurations {
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
	compile {
		exclude module: 'spring-boot-starter-logging'
		exclude group: 'javax.servlet'
	}
}

dependencies {

	implementation 'org.springframework.boot:spring-boot-starter-batch'
	implementation group: 'com.cardinalhealth.ids.boss2', name: 'security', version: "${securityVersion}"
	implementation group: 'com.cardinalhealth.ids.boss2', name: 'framework', version: "${frameworkVersion}"
	implementation group: 'com.cardinalhealth.ids.boss2', name: 'domain', version: "${domainVersion}"
	
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation ("org.springframework.cloud:spring-cloud-gcp-starter-storage:${gcpStorageVersion}")
	implementation "io.pivotal.cfenv:java-cfenv-boot:2.4.0"
	implementation ("io.jsonwebtoken:jjwt:${jjwtVersion}")
	
	implementation ("commons-beanutils:commons-beanutils:${commonsBeanutilsVersion}")
	implementation("org.dom4j:dom4j:${dom4jVersion}")
	implementation("org.apache.commons:commons-compress:${commonsCompressVersion}")
	implementation("org.hibernate.validator:hibernate-validator:${hibernateValidatorVersion}")
	implementation("org.yaml:snakeyaml:${snakeyamlVersion}")
	implementation("org.springframework.security:spring-security-web:${springSecurityWebVersion}")
	
	annotationProcessor "org.projectlombok:lombok"
	
	//Required for mysql db.<br>
	runtimeOnly 'com.microsoft.sqlserver:mssql-jdbc'
	
	// DB2 Database Driver
	runtimeOnly("com.ibm.db2:jcc:${db2Version}")
	
	runtimeOnly ("com.github.ulisesbocchio:jasypt-spring-boot-starter:${jasyptVersion}")
	runtimeOnly 'org.postgresql:postgresql'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	
	testImplementation 'org.springframework.batch:spring-batch-test'
	testImplementation ("org.meanbean:meanbean:${meanbeanVersion}")
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation ("cglib:cglib:${cglibVersion}")
	testCompile("org.spockframework:spock-core:${groovyVersion}")
	testCompile("org.spockframework:spock-spring:${groovyVersion}")
	testImplementation ("org.codehaus.groovy:groovy-json:${groovyJsonVersion}")
	testCompile("org.springframework.security:spring-security-test:${springSecurityTestVersion}")
}

task copyCerts(type: Copy) {
	delete "src/main/resources/certs"
	from zipTree(configurations.compileClasspath.filter {
		it.name == "framework-"+"${frameworkVersion}"+".jar"
	}.singleFile).matching {
		include '**/certs/**'
	}
	into 'src/main/resources'
	includeEmptyDirs = false
}

compileJava.dependsOn(copyCerts)

jacocoTestReport {
	reports {
		xml.enabled true
		csv.enabled false
	}
}
test.finalizedBy(project.tasks.jacocoTestReport)

test {
	jacoco {
		//append = false
		destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
	}
	systemProperty 'spring.profiles.active', 'local'
	ignoreFailures = ignoretestfaliure.toBoolean()
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

if(env == 'local') {
	
	def username = System.properties['user.name']
	
	sonarqube {
		properties {
			property "sonar.projectVersion", "LOCAL-BUILD by $username"
		}
	}
	
	gradle.taskGraph.afterTask { Task task, TaskState state ->
		if (state.executed) {
			def runningTask = "$task"
			if(runningTask == "task ':sonarqube'") {
				println "Please check sonar dashboard URL below : "
				println "==========================================================================="
				println "http://10.32.23.196:9000/dashboard?id=boss-deidentify-utility"
				println "==========================================================================="
			}
		}
	}
}