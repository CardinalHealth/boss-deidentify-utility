plugins {
	id 'org.springframework.boot' version '2.2.6.RELEASE'
	id 'java'
	id 'eclipse'
	id 'groovy'
	id 'jacoco'
}

apply plugin: 'io.spring.dependency-management'

ext {
	securityVersion = "0.0.1-SNAPSHOT"
	frameworkVersion = "0.0.1-SNAPSHOT"
	domainVersion = "0.0.1-SNAPSHOT"
	oktaVersion = "0.0.1-SNAPSHOT"

	springCloudVersion = "Hoxton.SR3"
	jjwtVersion = "0.9.1"
	jasyptVersion = "2.1.2"
	groovyVersion = "1.3-groovy-2.5"
	cglibVersion = "3.2.2"
	springSecurityTestVersion = "4.2.2.RELEASE"
	commonsBeanutilsVersion = "1.9.4"
	dom4jVersion = "2.1.3"
	commonsCompressVersion = "1.20"
	hibernateValidatorVersion = "6.1.5.Final"
	snakeyamlVersion = "1.26"
	springSecurityWebVersion = "5.3.2.RELEASE"
	meanbeanVersion = "2.0.3"
	jsonSmart = "2.3"
	db2Version = "11.5.5.0"
	apachePoiVersion= "4.1.2"
	ext['log4j2.version'] = '2.17.1'
}

group = 'com.cardinalhealth.ids.boss2'
archivesBaseName = 'boss-deidentify-utility'

sourceCompatibility = '11'
targetCompatibility = '11'

def nexus_url = project.hasProperty('url') ? project.property('url') : 'https://nexus.cardinalhealth.net/repository/sustech-maven-snapshot/dev/'
def env = project.hasProperty('env') ? project.property('env') : 'local'
def ignoretestfaliure=  project.hasProperty('ignoretestfaliure') ? project.property('ignoretestfaliure') : 'false'

repositories {
	if (env == 'local') {
		mavenLocal()
	} else {
		maven {url nexus_url}
	}
	maven {url "https://nexus.cardinalhealth.net/repository/maven/"}
}

configurations {
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
	compile {
		exclude module: 'spring-boot-starter-logging'
		exclude group: 'javax.servlet'
	}
}

dependencies {

	implementation 'org.springframework.boot:spring-boot-starter-batch'
	implementation group: 'com.cardinalhealth.ids.boss2', name: 'security', version: "${securityVersion}"
	implementation group: 'com.cardinalhealth.ids.boss2', name: 'framework', version: "${frameworkVersion}"
	implementation group: 'com.cardinalhealth.ids.boss2', name: 'domain', version: "${domainVersion}"

	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation group: 'org.springframework.security', name: 'spring-security-web', version: "${springSecurityWebVersion}"
	
	implementation "net.minidev:json-smart:${jsonSmart}"

	implementation 'org.springframework.cloud:spring-cloud-spring-service-connector'
	implementation 'org.springframework.cloud:spring-cloud-cloudfoundry-connector'  // cloud foundry runtime

	implementation group: 'io.jsonwebtoken', name: 'jjwt', version:"${jjwtVersion}"
	implementation group: 'commons-beanutils', name: 'commons-beanutils', version:"${commonsBeanutilsVersion}"
	implementation group: 'org.apache.commons', name: 'commons-compress', version: "${commonsCompressVersion}"
	implementation group: 'org.hibernate.validator', name: 'hibernate-validator', version: "${hibernateValidatorVersion}"
	implementation group: 'org.yaml', name: 'snakeyaml', version: "${snakeyamlVersion}"

	annotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.18.12'
	implementation ("org.apache.poi:poi-ooxml:${apachePoiVersion}")

	runtimeOnly ("com.github.ulisesbocchio:jasypt-spring-boot-starter:${jasyptVersion}")
	runtimeOnly 'org.postgresql:postgresql'
	
	// DB2 Database Driver
	runtimeOnly("com.ibm.db2:jcc:${db2Version}")

	developmentOnly group: 'org.springframework.boot', name: 'spring-boot-devtools', version: '2.3.3.RELEASE'
	implementation 'org.springframework.cloud:spring-cloud-gcp-starter-storage'
	
	testImplementation ("org.meanbean:meanbean:${meanbeanVersion}")
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation ("cglib:cglib:${cglibVersion}")
	testCompile("org.spockframework:spock-core:${groovyVersion}")
	testCompile("org.spockframework:spock-spring:${groovyVersion}")
	testCompile("org.springframework.security:spring-security-test:${springSecurityTestVersion}")
	compile group: 'org.apache.commons', name: 'commons-csv', version: '1.5'
	compile group: 'com.opencsv', name: 'opencsv', version: '5.3'
	
	
}

task copyCerts(type: Copy) {
	delete "src/main/resources/certs"
	from zipTree(configurations.compileClasspath.filter {
		it.name == "framework-"+"${frameworkVersion}"+".jar"
	}.singleFile).matching {
		include '**/certs/**'
	}
	into 'src/main/resources'
	includeEmptyDirs = false
}

compileJava.dependsOn(copyCerts)

jacocoTestReport {
	reports {
		xml.enabled true
		csv.enabled false
	}
//	 afterEvaluate {
//	 classDirectories.setFrom(files(classDirectories.files.collect {
//	 fileTree(dir: it, exclude: [ '**/entity/**', '**/src/**', '**/constant/**' ])
//	 }))
//	 }
}
test.finalizedBy(project.tasks.jacocoTestReport)

test {
	jacoco {

		destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
	}
	systemProperty 'spring.profiles.active', 'local'
	ignoreFailures = ignoretestfaliure.toBoolean()
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}
